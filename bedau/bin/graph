#!/usr/local/bin/blt_wish -f

if {$argc != 4} {
  puts stderr "Usage: $argv0 kill_data mate_data trade_data period"
  exit 1
}

set home $env(HOME)
set expts $home/r/phd/experiments

set auto_path [linsert $auto_path 0 $expts/tcl]

set bitmaps   $expts/tcl/bitmaps
set graph_dir $expts/ch/graphs
set grconf    $expts/tcl/grconf.tcl

set font -Adobe-times-medium-r-normal--*-180*
set steps 10

set xmin 1000000000
set xmax 0
set ymin 1000000000
set ymax 0

set title "Cumulative Interaction Rates"
set xtitle "Generation"
set ytitle "Cumulative Frequency"
set ylog 0
set graph "interactions.ps"

set kill_data_file [lindex $argv 0]
set mate_data_file [lindex $argv 1]
set trade_data_file [lindex $argv 2]
set period [lindex $argv 3]

set kill_data {}
set mate_data {}
set trade_data {}


proc read_file_data {file array do_limits} {

  global xmin xmax ymin ymax

  upvar $array l

  set f [open $file r]
  set line_num 0

  while {[gets $f line] >= 0} {

    incr line_num
    
    if {[scan $line "%d %f" x y] != 2} {
      puts stderr "Line $line_num of file $file does not contain two integers!\n"
      exit 1
    }

    # puts [format "read %d %.6f\n" $x $y]

    if {$do_limits && $x < $xmin} {set xmin $x}
    if {$do_limits && $x > $xmax} {set xmax $x}
    if {$do_limits && $y < $ymin} {set ymin $y}
    if {$do_limits && $y > $ymax} {set ymax $y}

    lappend l $y
  }
}

proc format_label {w value} {

  global xmin xmax

  if {$value > $xmax || $value < $xmin} {
    return " "
  }

  return [expr int($value)]
}

proc print_graph {file} {

  global ps
  
  .b psconfigure -colormode gray
  .b postscript $file -pagewidth 6.5i -pageheight 10i -landscape true
}

proc toggle_y_log {} {

  global ylog

  if {$ylog} { set ylog 0 } else {set ylog 1}

  .b yaxis configure -logscale $ylog
}

proc set_x_min {} {

  set cancel 123456789
  set limit [get_number 0 0 0 $cancel "Minimum X axis value."]

  if {$limit == $cancel} { return }

  .b xaxis configure -min $limit
}

proc set_x_max {} {

  set cancel 123456789
  set limit [get_number 0 0 0 $cancel "Maximum X axis value."]

  if {$limit == $cancel} { return }

  .b xaxis configure -max $limit
}


read_file_data $kill_data_file kill_data 1
read_file_data $mate_data_file mate_data 1
read_file_data $trade_data_file trade_data 1

set xmin 0

# puts "xmin is $xmin xmax is $xmax ymin is $ymin ymax is $ymax"

blt_graph .b -bg white -plotbackground white -width 600
.b configure -font $font
.b configure -title $title
.b legend configure -bg white -relief groove

if {$xmax <= $steps} {
  set stepsize 1
} else {
  set stepsize [expr floor(($xmax - $xmin) * $period / $steps)]
}

.b configure -plotrelief flat

.b xaxis configure -min [expr $xmin * $period]  -max [expr $xmax * $period] -stepsize $stepsize -subticks 0 -title $xtitle -font $font

.b yaxis configure -title $ytitle -font $font -logscale $ylog

for {set i $xmin} {$i <= $xmax} {incr i} {
  lappend xdata [expr $i * $period]
}

.b element create kills -xdata $xdata -ydata $kill_data -linewidth 2 -dashes 3 -background white -activeforeground black
.b element create mates -xdata $xdata -ydata $mate_data -linewidth 2 -background white -activeforeground black
.b element create trades -xdata $xdata -ydata $trade_data -linewidth 2 -dashes 5 -background white -activeforeground black

pack .b -expand 1 -fill both

set ps $graph

button .config -text "Configure" -relief groove -command \
  "exec [list /usr/local/bin/blt_wish -f $grconf [winfo name .] .b &]"
button .log -text "Toggle Y log" -relief groove -command toggle_y_log
button .p -text "Write $ps" -relief groove -command {print_graph $ps} -width [expr [string length $ps] + 5]
button .d -text Dismiss -relief groove -command {destroy .}

pack .config .log .p .d -pady 5 -ipadx 5 -side left

SetZoom .b

wm min . 0 0

set graph .b

bind $graph <B3-ButtonRelease> { %W crosshairs toggle }
        
proc TurnOnHairs { graph } {
    bind $graph <Any-Motion> {%W crosshairs configure -position @%x,%y}
}
proc TurnOffHairs { graph } {
    bind $graph <Any-Motion> {%W crosshairs configure -position @%x,%y}
}

bind $graph <Enter> { TurnOnHairs %W }
bind $graph <Leave> { TurnOffHairs %W }


# Local Variables:
# mode:tcl
# End:
