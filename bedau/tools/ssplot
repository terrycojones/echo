#! /usr/local/bin/bash
#
# ssplot - process data created by ssbug (a.k.a bug, ssbug2, ssbug3, etc.)




#### Defaults Variables

### set default strings for various variables. it is easier to port the script
### and/or account for system differences if the settings are created in one
### place and accessed via variable in subsequent calls.

## make sure we can smash anything we want
unset noclobber

## use the name under which the program was called as a prefix for errors
progname=`basename $0`

## option string to echo if requested or error in options processing
options="[-help] [-x/y/z range] [-log (x/y/z)] [-fs function-style] [-(no)auto] [-para] [-Pprinter] [-O output-file]"

## usage string
usage="usage: $progname $options file(s)"

## output string denotes plot destination:
##	1 - Visual output (Xwindows graphic by gnuplot) [default]
##	2 - PostScript printer (piped to lpr)
##	3 - PostScript file (redirected to file from translator)
output="1"

## location of the pgm visualization program
viewer=/usr/bin/X11/xv

## default options
viewopts=

## location of the plotting program (generally gnuplot)
plotter=/usr/local/bin/gnuplot

## options to gnuplot for making graphs in X, keep the size small so that
## the small tektronix X terminals are less likely to crash.
plotopts="-geometry 300x150"

## set temp files, use the PID to make the name unique (relatively)
cprint=/tmp/ssplot.$$.cprint
cset=/tmp/ssplot.$$.cset
gset=/tmp/ssplot.$$.gset
gplot=/tmp/ssplot.$$.gplot
dtemp=/tmp/ssplot.$$.data
pgmtemp=/tmp/ssplot.$$.pgm

## make sure the cset file exists
touch $cset

## echo hack to take care of the -n \c distinction. this will work even if
## this script is shared among SYSV and BSD echo flavors.
case "`echo 'a\c'`" in
"a\c")
  echon="echo -n"
  nlf=
  ;;
a)
  echon="echo"
  nlf="\c"
  ;;
*)
  echo "$progname: echo test error! is this UNIX?" 1>&2
  exit 1
  ;;
esac




#### Command Line

### process the command line, setting options and checking for files
### arguments are processed until none remain or the argument termination
### sequence (--) is given.

## parse until there are no arguments left
while [ $# -gt 0 ]; do
  case "$1" in
  -args)
    echo "$progname: argument list == $@"
    ;;
  -help)
    echo $usage
    exit 0
    ;;
  -log)
    shift
    echo "set logscale $1" >> $cset
    ;;
  -X|-x)
    shift
    echo "set xrange $1" >> $cset
    ;;
  -Y|-y)
    shift
    echo "set yrange $1" >> $cset
    ;;
  -Z|-z)
    shift
    echo "set zrange $1" >> $cset
    ;;
  -auto)
    echo "set autoscale" >> $cset
    ;;
  -noauto)
    echo "set noautoscale" >> $cset
    ;;
  -para)
    echo "set parametric" >> $cset
    ;;
  -fs)
    shift
    echo -n "set function style $1" >> $cset
    ;;
  -P*|-p*)
    echo "set terminal postscript" >> $cprint
    echo "set output \"| lpr $1\"" >> $cprint
    output="2"
    printer=$1
    ;;
  -O|-o)
    shift
    outfile=$1
    echo "set terminal postscript" >> $cprint
    echo "set output \"> $outfile\"" >> $cprint
    output="3"
    ;;
  --)
    shift
    break
    ;;
  -*)
    echo "$progname: the argument $1 is unrecognized" 1>&2
    ;;
  *)
    file_list="$file_list $1"
    ;;
  esac
  shift
done


## reset the command line with the file list or exit with error
if [ $file_list ]; then
  ## recycle $@ by placing the file list in
  set $file_list
  ## at this point, only file names should be left over, we check that the file
  ## exists before continuing, 
  for file do
    [ -f $file ] || {
      echo "$progname: $file does not exist or is irregular" 1>&2
      shift
    }
  done
else
  echo "$progname: no files specified" 1>&2
  exit 1
fi





#### Process Files

### now that the options are taken care of and the files have been verified,
### we process each of the output files with the appropriate set of tools.

for file do
  rm -f $gset $gplot

  echo "$progname: processing $file ... "

  case $file in
  *.Z|*.z|*.gz)
    gunzip -c $file | ssbehead > $dtemp
    name=`echo $file | sed -e 's/\.Z$//;s/\.z$//;s/\.gz$//'`
    ;;
  *)
    ssbehead < $file > $dtemp
    name=$file
    ;;
  esac

  ## grab the magic string (if any)
  magic=`head -1 $dtemp`

  ## load the common settings
  cat $cset >> $gset

  ## set the title of the graph to the file name (no compressed suffixes)
  echo "set title \"$name\"" >> $gset

  ## use the file suffix to determine type of data and processing mechanism
  if [ -s $dtemp ]; then
    case "$name" in
    *.allele|*.ndiv) # Non-Metric Diversity data
      echo "set xlabel \"Time\"; set ylabel \"Non-metric Diversity\";" >> $gset
      $echon "plot \"$dtemp\" using 1:2 title \"Wg1\" with lines,$nlf" > $gplot
      $echon "\"$dtemp\" using 1:3 title \"Wg2\" with lines,$nlf" >> $gplot
      $echon "\"$dtemp\" using 1:4 title \"Bg1\" with lines,$nlf" >> $gplot
      echo   "\"$dtemp\" using 1:5 title \"Bg2\" with lines " >> $gplot
      case "$output" in
      1)  echo "pause -1 $progname: Non-metric Diversity <Return>" >> $gplot ;;
      2)  echo "$progname: printing Non-metric Diversity - $name" ;;
      3)  echo "$progname: writing Non-metric Diversity to file - $outfile" ;;
      esac
      $plotter $plotopts $gset $cprint $gplot
      ;;

    *.div|*.mdiv) # Metric Diversity data
      echo "set xlabel \"Time\"; set ylabel \"Metric Diversity\";" >> $gset
      $echon "plot \"$dtemp\" using 1:2 title \"Wg\" with lines,$nlf" > $gplot
      $echon "\"$dtemp\" using 1:3 title \"Bg\" with lines,$nlf" >> $gplot
      $echon "\"$dtemp\" using 1:4 title \"Wb\" with lines,$nlf" >> $gplot
      echo   "\"$dtemp\" using 1:5 title \"Bb\" with lines " >> $gplot
      case "$output" in
      1)  echo "pause -1 $progname: Metric Diversity <Return>" >> $gplot ;;
      2)  echo "$progname: printing Metric Diversity - $name" ;;
      3)  echo "$progname: writing Metric Diversity to file - $outfile" ;;
      esac
      $plotter $plotopts $gset $cprint $gplot
      ;;

    *.food) # Food data
      echo "set xlabel \"Time\"; set ylabel \"Food Level\";" >> $gset
      echo "plot \"$dtemp\" with lines;" > $gplot
      case "$output" in
      1)  echo "pause -1 $progname: Food Level <Return>" >> $gplot ;;
      2)  echo "$progname: printing Food Level - $name" ;;
      3)  echo "$progname: writing Food Level to file - $outfile" ;;
      esac
      $plotter $plotopts $gset $cprint $gplot
      ;;

    *.pop) # Population Data
      echo "set xlabel \"Time\"; set ylabel \"Population\";" >> $gset
      echo "plot \"PopTmp\" with lines;" > $gplot
      case "$output" in
      1)  echo "pause -1 $progname: Population <Return>" >> $gplot ;;
      2)  echo "$progname: printing Population - $name" ;;
      3)  echo "$progname: writing Population to file - $outfile" ;;
      esac
      $plotter $plotopts $gset $cprint $gplot
      ;;

    *.mut) # Mutation Histograms
      sspgm < $dtemp | pnminvert > $pgmtemp
      case "$output" in
      1)
	 $viewer $viewopts $pgmtemp
	 ;;
      2)
	 echo "$progname: printing Mutation Plot: $name"
	 pnmtops < $pgmtemp | lpr $printer
	 ;;
      3)
	 echo "$progname: writing Mutation Plot to file: $outfile"
	 pnmtops < $pgmtemp > $outfile
	 ;;
      esac
      ;;

    *.guse|*.usage) # Usage Histograms
      sspgm < $dtemp | pnminvert > $pgmtemp
      case "$output" in
      1)
	 $viewer $viewopts $pgmtemp
	 ;;
      2)
	 echo "$progname: printing Usage Plot: $name"
	 pnmtops < $pgmtemp | lpr $printer
	 ;;
      3)
	 echo "$progname: writing Usage Plot to file: $outfile"
	 pnmtops < $pgmtemp > $outfile
	 ;;
      esac
      ;;

    esac

  else
    echo "$progname: \"$file\", contains no recognized data."
  fi
done


## final cleanup
rm -f $gplot $cprint $gset $cset $dtemp $pgmtemp
