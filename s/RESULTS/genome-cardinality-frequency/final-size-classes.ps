%!PS-Adobe-3.0 EPSF-3.0
%%Pages: 1
%%Title: (final-size-classes.ps)
%%DocumentNeededResources: font Helvetica Courier
%%BoundingBox:  71 74 538 721
%%Creator: Blt_graph (Tk version 3.6)
%%CreationDate: Fri Feb 25 00:11:50 1994
%%EndComments


200 dict begin

/BgColorProc 0 def	% Background color procedure (for symbols)
/StippleProc 0 def	% Stipple procedure (for bar segments)

/DashesProc 0 def	% Dashes procedure (for line segments)

/encoding {ISOLatin1Encoding} def
systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont { encoding encodefont realsetfont } def
} if

/Stroke { gsave stroke grestore } def

/Fill { gsave fill grestore } def

/SetFont { 	% Stack: pointSize fontName
    findfont exch scalefont setfont
} def

/SetDashes {		% Stack: numDashes
    dup 0 eq { pop [] 0 setdash } { 1 array astore 0 setdash } ifelse
} def

/Box {			% Stack: x y width height
    newpath
        exch 4 2 roll moveto
        dup 0 rlineto
        exch 0 exch rlineto
        neg 0 rlineto
    closepath
} def

/SetFgColor {		% Stack: red green blue
    CL 0 eq { pop pop pop 0 0 0 } if
    setrgbcolor
    CL 1 eq { currentgray setgray } if
} def

/SetBgColor {		% Stack: red green blue
    CL 0 eq { pop pop pop 1 1 1 } if
    setrgbcolor
    CL 1 eq { currentgray setgray } if
} def

% The next two definitions are taken from "$tk_library/prolog.ps"

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix {3 index} imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

/DrawSegment {	% Stack: x1 y1 x2 y2
    newpath 4 2 roll moveto lineto stroke
} def

/DrawText {		% Stack: ?bgColorProc? boolean centerX centerY
			% 	 strWidth strHeight baseline theta str
    gsave
	7 -2 roll translate	% Translate to center of bounding box
	exch neg rotate		% Rotate by theta
	exch 4 2 roll
	2 copy 2 copy 2 copy

	% If needed, draw the background area, setting the bg color

	-0.5 mul exch -0.5 mul exch 4 -2 roll Box
        7 -1 roll { gsave 7 -1 roll exec fill grestore } if

	% Move to the text string starting position

	-.5  mul 5 -1 roll add exch -.5 mul exch moveto
	pop exch dup dup 4 2 roll

        % Adjust character widths to get desired overall string width
        % adjust X = (desired width - real width) / #chars

 	stringwidth pop sub exch length div 0 3 -1 roll

	% Flip back the scale so that the string is not drawn in reverse

	1 -1 scale
	ashow
    grestore
} def

/DrawBitmap {		% Stack: ?bgColorProc? boolean centerX centerY
			%	 width height theta imageStr
    gsave
	6 -2 roll translate	% Translate to center of bounding box
	4 1 roll neg rotate	% Rotate by theta

	% Find upperleft corner of bounding box

	2 copy -.5 mul exch -.5 mul exch translate
	2 copy scale		% Make pixel unit scale
        newpath
            0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto
        closepath

	% Fill rectangle with background color

	4 -1 roll { gsave 4 -1 roll exec fill grestore } if

	% Paint the image string into the unit rectangle

	2 copy true 3 -1 roll 0 0 5 -1 roll 0 0 6 array astore 5 -1 roll
        imagemask
    grestore
}def

% Symbols:

% Skinny-cross
/Sc {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate 45 rotate
	0 0 3 -1 roll Sp
    grestore
} def

% Skinny-plus
/Sp {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate
	2 idiv  	% Stack: radius
	dup 2 copy	% Stack: radius radius radius radius
	newpath neg 0 moveto 0 lineto
	gsave BgColorProc fill grestore stroke
	newpath neg 0 exch moveto 0 exch lineto
	gsave BgColorProc fill grestore stroke
    grestore
} def

% Cross
/Cr {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate 45 rotate
	0 0 3 -1 roll Pl
    grestore
} def

% Plus
/Pl {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate
	dup 2 idiv  	% Stack: size radius
	exch 6 idiv 	% Stack: radius delta

	%
	%          2   3	The plus/cross symbol is a
	%			closed polygon of 12 points.
	%      0   1   4    5	The diagram to the left
	%           x,y		represents the positions of
	%     11  10   7    6	the points which are computed
	%			below.
	%          9   8
	%

	newpath
	    2 copy exch neg exch neg moveto dup neg dup lineto
	    2 copy neg exch neg lineto 2 copy exch neg lineto
	    dup dup neg lineto 2 copy neg lineto 2 copy lineto
	    dup dup lineto 2 copy exch lineto 2 copy neg exch lineto
	    dup dup neg exch lineto exch neg exch lineto
	closepath
	gsave BgColorProc fill grestore stroke
    grestore
} def

% Circle
/Ci {			% Stack: x y symbolSize
    3 copy pop
    moveto newpath
        2 div 0 360 arc
    closepath gsave BgColorProc fill grestore stroke
} def

% Square
/Sq {			% Stack: x y symbolSize
    dup dup 2 div dup
    6 -1 roll exch sub exch
    5 -1 roll exch sub 4 -2 roll Box
    gsave BgColorProc fill grestore Stroke
} def

% Line
/Li {			% Stack: x y symbolSize
    3 1 roll exch 3 -1 roll 2 div 3 copy
    newpath
        sub exch moveto add exch lineto
    stroke
} def

% Diamond
/Di {			% Stack: x y symbolSize
    gsave
	3 1 roll translate 45 rotate 0 0 3 -1 roll Sq
    grestore
} def


%%BeginSetup
gsave			% Save the graphics state

% Default line style parameters

1 setlinewidth		% width
1 setlinejoin		% join
0 setlinecap		% cap
0 SetDashes		% dashes

% Adjust coordinate system to use X11 coordinates

0 792 translate
1 -1 scale

% User defined page layout

/CL 1 def
71 718 translate
-90 rotate
%%EndSetup

12 /Helvetica-Bold SetFont
0.999985 0.937241 0.85881 SetBgColor  
65 28 573 389 Box Fill
gsave clip


% Element "line1"

1 setlinewidth
0 0 0.501953 SetFgColor  
/DashesProc {} def
newpath 67 108 moveto
153 185 lineto
203 233 lineto
238 276 lineto
266 338 lineto
288 338 lineto
307 338 lineto
338 376 lineto
351 376 lineto
384 415 lineto
487 415 lineto
557 415 lineto
DashesProc stroke
1 setlinewidth
0 SetDashes
/BgColorProc {
   0.999985 0.999985 0.999985 SetBgColor  
} def
0 0 0.501953 SetFgColor  
67 108 10 Ci
153 185 10 Ci
203 233 10 Ci
238 276 10 Ci
266 338 10 Ci
288 338 10 Ci
307 338 10 Ci
338 376 10 Ci
351 376 10 Ci
384 415 10 Ci
487 415 10 Ci
557 415 10 Ci

% Unset clipping
grestore

0.999985 0.894104 0.768616 SetBgColor  
0 0 647 28 Box Fill
0 28 65 389 Box Fill
638 28 9 389 Box Fill
0 417 647 50 Box Fill
12 /Helvetica-Bold SetFont
0 0 0 SetFgColor  
false 351 14 124 14 11 0 (Most Cunts Are Rare) DrawText
12 /Helvetica-Bold SetFont
0 0 0 SetFgColor  
false 351 453 86 14 11 0 (Sexual Control) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 67.5 438 17 10 8 0 (1E0) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 351 438 18 10 8 0 (1E1) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 636.5 438 17 10 8 0 (1E2) DrawText
0 0 0 SetFgColor  
1 setlinewidth
0 SetDashes
636 419 67 419 DrawSegment
153 419 153 425 DrawSegment
203 419 203 425 DrawSegment
238 419 238 425 DrawSegment
266 419 266 425 DrawSegment
288 419 288 425 DrawSegment
307 419 307 425 DrawSegment
324 419 324 425 DrawSegment
338 419 338 425 DrawSegment
351 419 351 425 DrawSegment
67 419 67 427 DrawSegment
437 419 437 425 DrawSegment
487 419 487 425 DrawSegment
523 419 523 425 DrawSegment
550 419 550 425 DrawSegment
573 419 573 425 DrawSegment
592 419 592 425 DrawSegment
608 419 608 425 DrawSegment
623 419 623 425 DrawSegment
636 419 636 425 DrawSegment
351 419 351 427 DrawSegment
636 419 636 427 DrawSegment
12 /Helvetica-Bold SetFont
0 0 0 SetFgColor  
false 14 222 84 14 11 90 (Pussies Eaten) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 35.5 415 17 10 8 0 (1E0) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 35 287 18 10 8 0 (1E1) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 35.5 158 17 10 8 0 (1E2) DrawText
10 /Courier-Bold SetFont
0 0 0 SetFgColor  
false 35.5 30 17 10 8 0 (1E3) DrawText
0 0 0 SetFgColor  
1 setlinewidth
0 SetDashes
63 30 63 415 DrawSegment
63 376 54 376 DrawSegment
63 354 54 354 DrawSegment
63 338 54 338 DrawSegment
63 325 54 325 DrawSegment
63 315 54 315 DrawSegment
63 306 54 306 DrawSegment
63 299 54 299 DrawSegment
63 292 54 292 DrawSegment
63 287 54 287 DrawSegment
63 415 52 415 DrawSegment
63 248 54 248 DrawSegment
63 225 54 225 DrawSegment
63 209 54 209 DrawSegment
63 197 54 197 DrawSegment
63 187 54 187 DrawSegment
63 178 54 178 DrawSegment
63 171 54 171 DrawSegment
63 164 54 164 DrawSegment
63 158 54 158 DrawSegment
63 287 52 287 DrawSegment
63 119 54 119 DrawSegment
63 97 54 97 DrawSegment
63 81 54 81 DrawSegment
63 68 54 68 DrawSegment
63 58 54 58 DrawSegment
63 49 54 49 DrawSegment
63 42 54 42 DrawSegment
63 35 54 35 DrawSegment
63 30 54 30 DrawSegment
63 158 52 158 DrawSegment
63 30 52 30 DrawSegment
showpage
%Trailer
grestore
end
%EOF
