%!PS-Adobe-3.0 EPSF-3.0
%%Pages: 1
%%Title: (curve.ps)
%%DocumentNeededResources: font Helvetica Courier
%%BoundingBox:  71 506 502 721
%%Creator: Blt_graph (Tk version 3.6)
%%CreationDate: Fri Sep 16 01:40:05 1994
%%EndComments


200 dict begin

/BgColorProc 0 def	% Background color procedure (for symbols)
/BorderProc 0 def	% Border outline procedure (for symbols)
/StippleProc 0 def	% Stipple procedure (for bar segments)
/DashesProc 0 def	% Dashes procedure (for line segments)


/encoding {ISOLatin1Encoding} def
systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont { encoding encodefont realsetfont } def
} if

/Stroke { gsave stroke grestore } def

/Fill { gsave fill grestore } def

/SetFont { 	% Stack: pointSize fontName
    findfont exch scalefont setfont
} def

/SetDashes {		% Stack: numDashes
    dup 0 eq { pop [] 0 setdash } { 1 array astore 0 setdash } ifelse
} def

/Box {			% Stack: x y width height
    newpath
        exch 4 2 roll moveto
        dup 0 rlineto
        exch 0 exch rlineto
        neg 0 rlineto
    closepath
} def

/SetFgColor {		% Stack: red green blue
    CL 0 eq { pop pop pop 0 0 0 } if
    setrgbcolor
    CL 1 eq { currentgray setgray } if
} def

/SetBgColor {		% Stack: red green blue
    CL 0 eq { pop pop pop 1 1 1 } if
    setrgbcolor
    CL 1 eq { currentgray setgray } if
} def

% The next two definitions are taken from "$tk_library/prolog.ps"

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix {3 index} imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

/DrawSegment {	% Stack: x1 y1 x2 y2
    newpath 4 2 roll moveto lineto stroke
} def

/DrawText {		% Stack: ?bgColorProc? boolean centerX centerY
			% 	 strWidth strHeight baseline theta str
    gsave
	7 -2 roll translate	% Translate to center of bounding box
	exch neg rotate		% Rotate by theta
	exch 4 2 roll
	2 copy 2 copy 2 copy

	% If needed, draw the background area, setting the bg color

	-0.5 mul exch -0.5 mul exch 4 -2 roll Box
        7 -1 roll { gsave 7 -1 roll exec fill grestore } if

	% Move to the text string starting position

	-.5  mul 5 -1 roll add exch -.5 mul exch moveto
	pop exch dup dup 4 2 roll

        % Adjust character widths to get desired overall string width
        % adjust X = (desired width - real width) / #chars

 	stringwidth pop sub exch length div 0 3 -1 roll

	% Flip back the scale so that the string is not drawn in reverse

	1 -1 scale
	ashow
    grestore
} def

/DrawBitmap {		% Stack: ?bgColorProc? boolean centerX centerY
			%	 width height theta imageStr
    gsave
	6 -2 roll translate	% Translate to center of bounding box
	4 1 roll neg rotate	% Rotate by theta

	% Find upperleft corner of bounding box

	2 copy -.5 mul exch -.5 mul exch translate
	2 copy scale		% Make pixel unit scale
        newpath
            0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto
        closepath

	% Fill rectangle with background color

	4 -1 roll { gsave 4 -1 roll exec fill grestore } if

	% Paint the image string into the unit rectangle

	2 copy true 3 -1 roll 0 0 5 -1 roll 0 0 6 array astore 5 -1 roll
        imagemask
    grestore
}def

% Symbols:

% Skinny-cross
/Sc {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate 45 rotate
	0 0 3 -1 roll Sp
    grestore
} def

% Skinny-plus
/Sp {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate
	2 idiv  	% Stack: radius
	dup 2 copy	% Stack: radius radius radius radius
	newpath neg 0 moveto 0 lineto
	gsave BgColorProc fill grestore stroke
	newpath neg 0 exch moveto 0 exch lineto
	gsave BgColorProc fill grestore stroke
    grestore
} def

% Cross
/Cr {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate 45 rotate
	0 0 3 -1 roll Pl
    grestore
} def

% Plus
/Pl {			% Stack: x y symbolSize
    gsave
	3 -2 roll translate
	dup 2 idiv  	% Stack: size radius
	exch 6 idiv 	% Stack: radius delta

	%
	%          2   3	The plus/cross symbol is a
	%			closed polygon of 12 points.
	%      0   1   4    5	The diagram to the left
	%           x,y		represents the positions of
	%     11  10   7    6	the points which are computed
	%			below.
	%          9   8
	%

	newpath
	    2 copy exch neg exch neg moveto dup neg dup lineto
	    2 copy neg exch neg lineto 2 copy exch neg lineto
	    dup dup neg lineto 2 copy neg lineto 2 copy lineto
	    dup dup lineto 2 copy exch lineto 2 copy neg exch lineto
	    dup dup neg exch lineto exch neg exch lineto
	closepath
	Fill BorderProc
    grestore
} def

% Circle
/Ci {			% Stack: x y symbolSize
    3 copy pop
    moveto newpath
        2 div 0 360 arc
    closepath Fill BorderProc
} def

% Square
/Sq {			% Stack: x y symbolSize
    dup dup 2 div dup
    6 -1 roll exch sub exch
    5 -1 roll exch sub 4 -2 roll Box
    Fill BorderProc
} def

% Line
/Li {			% Stack: x y symbolSize
    3 1 roll exch 3 -1 roll 2 div 3 copy
    newpath
        sub exch moveto add exch lineto
    stroke
} def

% Diamond
/Di {			% Stack: x y symbolSize
    gsave
	3 1 roll translate 45 rotate 0 0 3 -1 roll Sq
    grestore
} def


%%BeginSetup
gsave			% Save the graphics state

% Default line style parameters

1 setlinewidth		% width
1 setlinejoin		% join
0 setlinecap		% cap
0 SetDashes		% dashes

% Adjust coordinate system to use X11 coordinates

0 792 translate
1 -1 scale

% User defined page layout

/CL 1 def
71 71 translate
%%EndSetup

18 /Times-Roman SetFont
0.999985 0.999985 0.999985 SetBgColor  
87 38 195 101 Box Fill
gsave clip


% Element "Cluster Distance 10"

0.999985 0 0 SetFgColor  
/DashesProc {} def
2 setlinewidth
newpath 93 88 moveto
111 42 lineto
129 83 lineto
148 98 lineto
166 113 lineto
185 123 lineto
203 130 lineto
221 133 lineto
DashesProc stroke
0.999985 0 0 SetFgColor  
2 setlinewidth
0 SetDashes
/BgColorProc {
   0 0 0.501953 SetBgColor  
} def
/BorderProc {} def
93 88 3.24264 Sq
111 42 3.24264 Sq
129 83 3.24264 Sq
148 98 3.24264 Sq
166 113 3.24264 Sq
185 123 3.24264 Sq
203 130 3.24264 Sq
221 133 3.24264 Sq

% Element "Cluster Distance 15"

0.529404 0.807831 0.921555 SetFgColor  
/DashesProc {} def
2 setlinewidth
newpath 93 107 moveto
111 76 lineto
129 106 lineto
148 108 lineto
166 115 lineto
185 128 lineto
203 131 lineto
221 132 lineto
240 133 lineto
DashesProc stroke
0.529404 0.807831 0.921555 SetFgColor  
2 setlinewidth
0 SetDashes
/BgColorProc {
   0 0 0.501953 SetBgColor  
} def
/BorderProc {} def
93 107 8 Pl
111 76 8 Pl
129 106 8 Pl
148 108 8 Pl
166 115 8 Pl
185 128 8 Pl
203 131 8 Pl
221 132 8 Pl
240 133 8 Pl

% Element "Cluster Distance 20"

0.133331 0.54509 0.133331 SetFgColor  
/DashesProc {} def
2 setlinewidth
newpath 93 121 moveto
111 106 lineto
129 123 lineto
148 125 lineto
166 127 lineto
185 131 lineto
203 133 lineto
221 135 lineto
240 134 lineto
258 135 lineto
276 134 lineto
DashesProc stroke
0.133331 0.54509 0.133331 SetFgColor  
2 setlinewidth
0 SetDashes
/BgColorProc {
   0 0 0.501953 SetBgColor  
} def
/BorderProc {} def
93 121 7 Ci
111 106 7 Ci
129 123 7 Ci
148 125 7 Ci
166 127 7 Ci
185 131 7 Ci
203 133 7 Ci
221 135 7 Ci
240 134 7 Ci
258 135 7 Ci
276 134 7 Ci

% Unset clipping
grestore

0.999985 0.999985 0.999985 SetBgColor  
0 0 431 38 Box Fill
0 38 87 101 Box Fill
282 38 149 101 Box Fill
0 139 431 76 Box Fill
0.999985 0.999985 0.999985 SetBgColor  
286 38 141 64 Box Fill
0.999985 0.999985 0.999985 SetBgColor  
286 101 141 1 Box Fill
426 38 1 64 Box Fill
0.599991 0.599991 0.599991 SetBgColor  
newpath 286 102 moveto
286 38 lineto
427 38 lineto
426 39 lineto
287 39 lineto
287 101 lineto
286 102 lineto
286 102 lineto closepath Fill
0.599991 0.599991 0.599991 SetBgColor  
287 100 139 1 Box Fill
425 39 1 62 Box Fill
0.999985 0.999985 0.999985 SetBgColor  
newpath 287 101 moveto
287 39 lineto
426 39 lineto
425 40 lineto
288 40 lineto
288 100 lineto
287 101 lineto
287 101 lineto closepath Fill
0.999985 0 0 SetFgColor  
2 setlinewidth
0 SetDashes
/BgColorProc {
   0 0 0.501953 SetBgColor  
} def
/BorderProc {} def
297 49 6.77817 Sq
12 /Helvetica-Bold SetFont
0 0 0 SetFgColor  
false 364 49 116 14 11 0 (Cluster Distance 10) DrawText
0.529404 0.807831 0.921555 SetFgColor  
2 setlinewidth
0 SetDashes
/BgColorProc {
   0 0 0.501953 SetBgColor  
} def
/BorderProc {} def
297 69 11 Pl
12 /Helvetica-Bold SetFont
0 0 0 SetFgColor  
false 364 69 116 14 11 0 (Cluster Distance 15) DrawText
0.133331 0.54509 0.133331 SetFgColor  
2 setlinewidth
0 SetDashes
/BgColorProc {
   0 0 0.501953 SetBgColor  
} def
/BorderProc {} def
297 89 11 Ci
12 /Helvetica-Bold SetFont
0 0 0 SetFgColor  
false 364 89 116 14 11 0 (Cluster Distance 20) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 184 19.5 164 19 15 0 (Preston Species Curve) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 184.5 196.5 55 19 15 0 (Octave) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 93 164.5 8 19 15 0 (0) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 129.5 164.5 9 19 15 0 (2) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 166 164.5 8 19 15 0 (4) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 203 164.5 8 19 15 0 (6) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 240 164.5 8 19 15 0 (8) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 276.5 164.5 19 19 15 0 (10) DrawText
0 0 0 SetFgColor  
1 setlinewidth
0 SetDashes
276 142 93 142 DrawSegment
93 142 93 151 DrawSegment
129 142 129 151 DrawSegment
166 142 166 151 DrawSegment
203 142 203 151 DrawSegment
240 142 240 151 DrawSegment
276 142 276 151 DrawSegment
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 19.5 88.5 141 19 15 90 (Species per Octave) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 67 135.5 8 19 15 0 (0) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 62 106.5 18 19 15 0 (50) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 57 76.5 28 19 15 0 (100) DrawText
18 /Times-Roman SetFont
0 0 0 SetFgColor  
false 57 47.5 28 19 15 0 (150) DrawText
0 0 0 SetFgColor  
1 setlinewidth
0 SetDashes
84 42 84 135 DrawSegment
84 120 79 120 DrawSegment
84 135 75 135 DrawSegment
84 91 79 91 DrawSegment
84 106 75 106 DrawSegment
84 62 79 62 DrawSegment
84 76 75 76 DrawSegment
84 47 75 47 DrawSegment
showpage
%Trailer
grestore
end
%EOF
